{"version":3,"sources":["Component/TodoFooter.js","Component/TodoItem.js","Component/TodoBody.js","Component/TodoHeader.js","Component/TodoMain.js","App.js","serviceWorker.js","index.js"],"names":["TodoFooter","align","span","checked","this","props","allChecked","onClick","changeAll","todoDoneCount","todoCount","offset","type","clearDone","React","Component","TodoItem","state","enter","setState","deleteTodo","index","changeTodo","Item","onMouseOver","handleMouseOver","bind","onMouseOut","handleMouseOut","todoList","isDone","handleChange","text","CloseOutlined","handleDelete","hidden","TodoBody","others","bordered","dataSource","renderItem","item","TodoHeader","value","e","keyCode","target","todoItem","addTodo","onKeyUp","handleKeyUp","onChange","placeholder","prefix","UserOutlined","TodoMain","isAllChecked","every","todo","push","splice","map","filter","title","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6b0a06a.chunk.js","sourcesContent":["import React from \"react\";\nimport {Row, Col, Checkbox, Button} from \"antd\";\n\nclass TodoFooter extends React.Component {\n    render() {\n        return (\n            <Row align=\"middle\">\n                <Col span={6}>\n                    <Checkbox checked={this.props.allChecked} onClick={this.props.changeAll}>全选</Checkbox>\n                </Col>\n                <Col span={6}>\n                    已完成{this.props.todoDoneCount} / 全部{this.props.todoCount}\n                </Col>\n                <Col span={6} offset={6}>\n                    <Button type=\"primary\" onClick={this.props.clearDone}>清除已完成任务</Button>\n                </Col>\n            </Row>\n        )\n    }\n}\n\nexport default TodoFooter","import React from \"react\";\nimport {List, Checkbox} from \"antd\";\nimport {CloseOutlined} from \"@ant-design/icons\";\n\nclass TodoItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            enter: true\n        }\n    }\n\n    handleMouseOver() {\n        this.setState({\n            enter: false\n        })\n    }\n\n    handleMouseOut() {\n        this.setState({\n            enter: true\n        })\n    }\n\n    handleDelete() {\n        this.props.deleteTodo(this.props.index)\n    }\n\n    handleChange() {\n        // this.props.todoList.isDone = !this.props.todoList.isDone\n        this.props.changeTodo(this.props.index)\n    }\n\n    render() {\n        return (\n            <List.Item\n                onMouseOver={this.handleMouseOver.bind(this)}\n                onMouseOut={this.handleMouseOut.bind(this)}\n            >\n                <Checkbox checked={this.props.todoList.isDone} onClick={this.handleChange.bind(this)}>\n                    {this.props.todoList.text}\n                </Checkbox>\n                <CloseOutlined\n                    onClick={this.handleDelete.bind(this)}\n                    hidden={this.state.enter}\n                />\n            </List.Item>\n        )\n    }\n}\n\nexport default TodoItem","import React from \"react\";\nimport {List} from \"antd\";\nimport TodoItem from './TodoItem'\n\nclass TodoBody extends React.Component {\n    render() {\n        let {todoList, ...others} = this.props\n        return (\n            <div>\n                <List\n                    bordered\n                    dataSource={todoList}\n                    renderItem={(item, index) => (\n                        <TodoItem todoList={item} index={index} {...others}/>\n                    )}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TodoBody","import React from \"react\";\nimport {Input} from \"antd\";\nimport {UserOutlined} from '@ant-design/icons';\n\nclass TodoHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\"\n        }\n    }\n\n    handleKeyUp(e) {\n        // 监听回车事件\n        if (e.keyCode === 13) {\n            let value = e.target.value\n            if (!value) return false\n\n            let todoItem = {\n                text: value,\n                isDone: false\n            }\n\n            this.setState({\n                value: \"\"\n            })\n            this.props.addTodo(todoItem)\n        }\n    }\n\n    handleChange(e) {\n        this.setState({\n            value: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Input onKeyUp={this.handleKeyUp.bind(this)}\n                       onChange={this.handleChange.bind(this)}\n                       value={this.state.value}\n                       placeholder=\"请输入你的任务名称，按回车键确认\"\n                       type=\"text\"\n                       prefix={<UserOutlined/>}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TodoHeader","import React from \"react\";\nimport {Card} from \"antd\";\nimport TodoFooter from './TodoFooter'\nimport TodoBody from \"./TodoBody\";\nimport TodoHeader from \"./TodoHeader\";\n\nclass TodoMain extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todoList: [],\n            isAllChecked: false\n        }\n    }\n\n    allChecked() {\n        let isAllChecked = false;\n\n        if (this.state.todoList.every(todo => todo.isDone)) {\n            isAllChecked = true;\n        }\n\n        this.setState({   //改变状态，组件重绘\n            todoList: this.state.todoList,\n            isAllChecked: isAllChecked\n        });\n    }\n\n    addTodo(todoItem) {\n        this.state.todoList.push(todoItem)\n        this.allChecked()\n    }\n\n    deleteTodo(index) {\n        this.state.todoList.splice(index, 1)\n        this.allChecked()\n    }\n\n    changeTodo(index) {\n        this.state.todoList[index].isDone = !this.state.todoList[index].isDone\n        this.allChecked()\n    }\n\n    changeAll() {\n        this.setState({\n            todoList: this.state.todoList.map((todo) => {\n                todo.isDone = !this.state.isAllChecked;\n                return todo;\n            }),\n            isAllChecked: !this.state.isAllChecked\n        });\n    }\n\n    clearDone() {\n        this.state.todoList = this.state.todoList.filter(todo => !todo.isDone)\n        this.allChecked()\n    }\n\n    render() {\n        return (\n            <Card title=\"Todo List\">\n                <TodoHeader\n                    addTodo={this.addTodo.bind(this)}\n                />\n                <br/>\n                <TodoBody\n                    todoList={this.state.todoList}\n                    deleteTodo={this.deleteTodo.bind(this)}\n                    changeTodo={this.changeTodo.bind(this)}\n                />\n                <br/>\n                <TodoFooter\n                    allChecked={this.state.isAllChecked}\n                    todoDoneCount={(this.state.todoList && this.state.todoList.filter((todo) => todo.isDone)).length || 0}\n                    todoCount={this.state.todoList.length || 0}\n                    clearDone={this.clearDone.bind(this)}\n                    changeAll={this.changeAll.bind(this)}\n                />\n            </Card>\n        )\n    }\n\n}\n\nexport default TodoMain","import React from 'react';\nimport './App.css';\nimport {Row, Col} from 'antd';\nimport TodoMain from './Component/TodoMain'\n\nfunction App() {\n    return (\n        <div>\n            <Row>\n                <Col span={8} offset={8}>\n                    <TodoMain/>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}