{"version":3,"sources":["Component/TodoFooter.js","Component/TodoItem.js","Component/TodoBody.js","Component/TodoHeader.js","Component/TodoMain.js","App.js","serviceWorker.js","index.js"],"names":["TodoFooter","align","span","offset","type","React","Component","TodoItem","Item","this","props","todoList","text","TodoBody","bordered","dataSource","renderItem","item","TodoHeader","state","value","e","keyCode","target","todoItem","isDone","setState","addTodo","onKeyUp","handleKeyUp","bind","onChange","handleChange","placeholder","prefix","UserOutlined","TodoMain","isAllChecked","every","todo","push","console","log","allChecked","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2UAmBeA,E,uKAdP,OACI,kBAAC,IAAD,CAAKC,MAAM,UACP,kBAAC,IAAD,CAAKC,KAAM,GACP,kBAAC,IAAD,sBAEJ,kBAAC,IAAD,CAAKA,KAAM,GAAX,uCACA,kBAAC,IAAD,CAAKA,KAAM,EAAGC,OAAQ,GAClB,kBAAC,IAAD,CAAQC,KAAK,WAAb,oD,GATKC,IAAMC,W,SCUhBC,E,uKARP,OACI,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAD,KAAWC,KAAKC,MAAMC,SAASC,W,GAJxBP,IAAMC,WCwBdO,E,uKAdP,OACI,6BACI,kBAAC,IAAD,CACIC,UAAQ,EACRC,WAAYN,KAAKC,MAAMC,SACvBK,WAAY,SAACC,GAAD,OACR,kBAAC,EAAD,CAAUN,SAAUM,Y,GARrBZ,IAAMC,W,kBCwCdY,E,kDA9CX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTC,MAAO,IAHI,E,wDAOPC,GAER,GAAkB,KAAdA,EAAEC,QAAgB,CAClB,IAAIF,EAAQC,EAAEE,OAAOH,MACrB,IAAKA,EAAO,OAAO,EAEnB,IAAII,EAAW,CACXZ,KAAMQ,EACNK,QAAQ,GAGZhB,KAAKiB,SAAS,CACVN,MAAO,KAEXX,KAAKC,MAAMiB,QAAQH,M,mCAIdH,GACTZ,KAAKiB,SAAS,CACVN,MAAOC,EAAEE,OAAOH,U,+BAKpB,OACI,6BACI,kBAAC,IAAD,CAAOQ,QAASnB,KAAKoB,YAAYC,KAAKrB,MAC/BsB,SAAUtB,KAAKuB,aAAaF,KAAKrB,MACjCW,MAAOX,KAAKU,MAAMC,MAClBa,YAAY,mGACZ7B,KAAK,OACL8B,OAAQ,kBAACC,EAAA,EAAD,a,GAxCN9B,IAAMC,WC0ChB8B,E,kDAvCX,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTR,SAAU,GACV0B,cAAc,GAJH,E,yDASf,IAAIA,GAAe,EACf5B,KAAKU,MAAMR,SAAS2B,OAAM,SAAAC,GAAI,OAAIA,EAAKd,YACvCY,GAAe,GAEnB5B,KAAKiB,SAAS,CACVf,SAAUF,KAAKU,MAAMR,SACrB0B,aAAcA,M,8BAIdb,GACJf,KAAKU,MAAMR,SAAS6B,KAAKhB,GACzBiB,QAAQC,IAAIjC,KAAKU,MAAMR,UACvBF,KAAKkC,e,+BAIL,OACI,kBAAC,IAAD,CAAMC,MAAM,aACR,kBAAC,EAAD,CAAYjB,QAASlB,KAAKkB,QAAQG,KAAKrB,QACvC,6BACA,kBAAC,EAAD,CAAUE,SAAUF,KAAKU,MAAMR,WAC/B,6BACA,kBAAC,EAAD,W,GAjCON,IAAMC,WCWduC,MAZf,WACI,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK3C,KAAM,EAAGC,OAAQ,GAClB,kBAAC,EAAD,UCEA2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.050960b6.chunk.js","sourcesContent":["import React from \"react\";\nimport {Row, Col, Checkbox, Button} from \"antd\";\n\nclass TodoFooter extends React.Component {\n    render() {\n        return (\n            <Row align=\"middle\">\n                <Col span={6}>\n                    <Checkbox>全选</Checkbox>\n                </Col>\n                <Col span={6}>已完成1 / 全部3</Col>\n                <Col span={6} offset={6}>\n                    <Button type=\"primary\">清除已完成任务</Button>\n                </Col>\n            </Row>\n        )\n    }\n}\n\nexport default TodoFooter","import React from \"react\";\nimport {List, Checkbox} from \"antd\";\n\nclass TodoItem extends React.Component {\n    render() {\n        return (\n            <List.Item>\n                <Checkbox>{this.props.todoList.text}</Checkbox>\n            </List.Item>\n        )\n    }\n}\n\nexport default TodoItem","import React from \"react\";\nimport {List, Checkbox} from \"antd\";\nimport TodoItem from './TodoItem'\n\nconst data = [\n    {\n        text: \"1\",\n        isDone: false\n    }\n];\n\nclass TodoBody extends React.Component {\n    render() {\n        return (\n            <div>\n                <List\n                    bordered\n                    dataSource={this.props.todoList}\n                    renderItem={(item) => (\n                        <TodoItem todoList={item}/>\n                    )}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TodoBody","import React from \"react\";\nimport {Input} from \"antd\";\nimport {UserOutlined} from '@ant-design/icons';\n\nclass TodoHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\"\n        }\n    }\n\n    handleKeyUp(e) {\n        // 监听回车事件\n        if (e.keyCode === 13) {\n            let value = e.target.value\n            if (!value) return false\n\n            let todoItem = {\n                text: value,\n                isDone: false\n            }\n\n            this.setState({\n                value: \"\"\n            })\n            this.props.addTodo(todoItem)\n        }\n    }\n\n    handleChange(e) {\n        this.setState({\n            value: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Input onKeyUp={this.handleKeyUp.bind(this)}\n                       onChange={this.handleChange.bind(this)}\n                       value={this.state.value}\n                       placeholder=\"请输入你的任务名称，按回车键确认\"\n                       type=\"text\"\n                       prefix={<UserOutlined/>}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TodoHeader","import React from \"react\";\nimport {Card, Divider} from \"antd\";\nimport TodoFooter from './TodoFooter'\nimport TodoBody from \"./TodoBody\";\nimport TodoHeader from \"./TodoHeader\";\n\nclass TodoMain extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todoList: [],\n            isAllChecked: false\n        }\n    }\n\n    allChecked() {\n        let isAllChecked = false;\n        if (this.state.todoList.every(todo => todo.isDone)) {\n            isAllChecked = true;\n        }\n        this.setState({   //改变状态，组件重绘\n            todoList: this.state.todoList,\n            isAllChecked: isAllChecked\n        });\n    }\n\n    addTodo(todoItem) {\n        this.state.todoList.push(todoItem)\n        console.log(this.state.todoList)\n        this.allChecked()\n    }\n\n    render() {\n        return (\n            <Card title=\"Todo List\">\n                <TodoHeader addTodo={this.addTodo.bind(this)}/>\n                <br/>\n                <TodoBody todoList={this.state.todoList}/>\n                <br/>\n                <TodoFooter/>\n            </Card>\n        )\n    }\n\n}\n\nexport default TodoMain","import React from 'react';\nimport './App.css';\nimport {Row, Col} from 'antd';\nimport TodoMain from './Component/TodoMain'\n\nfunction App() {\n    return (\n        <div>\n            <Row>\n                <Col span={8} offset={8}>\n                    <TodoMain/>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}